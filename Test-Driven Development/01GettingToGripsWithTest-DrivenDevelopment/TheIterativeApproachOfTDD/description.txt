The iterative approach of TDD
        การใช้ Test-Driven Development ในการพัฒนาโค้ดโดยเขียน unit tests ก่อนและพัฒนาโค้ดในวงจรเล็กๆ 
    ตามขั้นตอน Red-Green-Refactor ที่ทำซ้ำไปเรื่อยๆ เพื่อพัฒนาโค้ดอย่างมีประสิทธิภาพและมั่นใจได้ว่าโค้ดทำงานถูกต้องตามที่คาดหวัง
    
    ขั้นตอนของการใช้ Iterative TDD กับ Golang:
        - Red Phase (เขียนการทดสอบที่ล้มเหลว): ในขั้นตอนแรก คุณจะเขียน unit test หรือ integration test ที่ทดสอบฟังก์ชันหรือโมดูลที่คุณจะพัฒนา 
        โดยในการเขียน test ครั้งแรกมันจะล้มเหลว (Red) เนื่องจากยังไม่มีโค้ดที่ทำงานจริง
       
        - Green Phase (เขียนโค้ดให้ผ่านการทดสอบ): ในขั้นตอนนี้ คุณจะเขียนโค้ดให้เพียงพอที่จะทำให้การทดสอบที่คุณเขียนไว้ในขั้นตอน Red ผ่านไปได้ 
        โดยการเขียนโค้ดที่ทำให้ผลลัพธ์ตรงกับความคาดหวังจากการทดสอบ
       
        - Refactor Phase (ปรับปรุงโค้ด): เมื่อโค้ดสามารถทำงานได้ตามที่ทดสอบแล้ว ขั้นตอนถัดไปคือการปรับปรุงโค้ด (Refactor) 
        โดยการปรับโครงสร้างโค้ดให้ดีขึ้น เช่น ทำให้โค้ดอ่านง่ายขึ้น, เพิ่มประสิทธิภาพ, หรือแยกฟังก์ชันต่างๆ ขั้นตอนนี้จะทำโดยไม่เปลี่ยนแปลงพฤติกรรมของโค้ด และต้องให้การทดสอบยังคงผ่าน


    ข้อดีของการใช้ Iterative TDD กับ Golang:
        - ช่วยเพิ่มความมั่นใจในโค้ด: การเขียน unit test ก่อนทำให้คุณมั่นใจว่าโค้ดที่คุณเขียนทำงานได้ตามที่คาดหวัง

        - ปรับปรุงคุณภาพโค้ด: กระบวนการ refactor ช่วยให้โค้ดสะอาดและง่ายต่อการบำรุงรักษา

        - ลดข้อผิดพลาด: การทดสอบอย่างต่อเนื่องช่วยลดข้อผิดพลาดในระหว่างการพัฒนา
        
