Structure your tests
    การจัดระเบียบและออกแบบการทดสอบในโครงการซอฟต์แวร์ให้มีความชัดเจน สะดวกต่อการบำรุงรักษา และทำให้สามารถอ่านและเข้าใจได้ง่ายขึ้น โดยเฉพาะในบริบทของ Test-Driven Development (TDD)

    หลักการที่ดีในการจัดโครงสร้างการทดสอบ
    
        1. ใช้ชื่อที่สื่อความหมาย

        2. แยกโครงสร้างของแต่ละประเภทของการทดสอบ
            - Unit tests: ทดสอบฟังก์ชันหรือหน่วยงานของโค้ดที่เล็กที่สุด
            - Integration tests: ทดสอบการทำงานร่วมกันระหว่างหลายๆ ระบบหรือโมดูล
            - End-to-End tests: ทดสอบระบบทั้งหมดจากมุมมองของผู้ใช้งาน

        3. สร้างโครงสร้างไดเรกทอรีที่ชัดเจน
            ควรแยกโค้ดทดสอบออกจากโค้ดหลัก (production code) โดยจัดการทดสอบในไดเรกทอรีแยกต่างหาก เช่น tests, __tests__, หรือ pkg/test ขึ้นอยู่กับโครงสร้างโปรเจกต์

        4. ใช้ Table-Driven Tests เป็นรูปแบบการเขียนการทดสอบที่สามารถทดสอบหลายกรณี (test cases) ในครั้งเดียว 
        โดยใช้ข้อมูลในรูปแบบตาราง (table) เพื่อทดสอบหลายๆ เงื่อนไขที่ต่างกันในฟังก์ชันเดียวกัน ซึ่งทำให้โค้ดการทดสอบสั้นลงและอ่านง่ายขึ้น

        5. แยกการทดสอบออกเป็นฟังก์ชันย่อยๆ 
            การแยกการทดสอบที่ซับซ้อนออกเป็นหลายๆ ฟังก์ชันย่อยจะทำให้โค้ดทดสอบดูแลและเข้าใจง่ายขึ้น เช่น การแยกการทดสอบกรณีต่างๆ ให้เป็นฟังก์ชันที่ชัดเจน
            
        6. จัดการการตั้งค่าระบบ (Setup) และการทำความสะอาด (Teardown)
            ควรจัดการ setup (การตั้งค่าเริ่มต้น) และ teardown (การทำความสะอาดหลังการทดสอบ) อย่างชัดเจน เช่น การใช้ t.Setup 
        ในกรณีที่ต้องการเตรียมการก่อนการทดสอบ และ t.TearDown หลังการทดสอบเสร็จสิ้น    

        7. ใช้การทดสอบที่แยกออกจากกัน
            ทุกๆ test ควรจะสามารถทำงานได้โดยไม่ต้องพึ่งพา test อื่นๆ เพื่อหลีกเลี่ยงปัญหาที่เกิดจากการทดสอบที่ขึ้นกับกัน เช่น เมื่อ test หนึ่งล้มเหลวแล้วทำให้ test อื่นๆ ล้มเหลวไปด้วย

        8. ทำให้โค้ดทดสอบอ่านง่าย    
