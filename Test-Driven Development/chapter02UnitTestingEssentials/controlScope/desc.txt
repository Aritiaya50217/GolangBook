Control scope

        การควบคุมการเข้าถึงและการใช้ตัวแปร, ฟังก์ชัน หรือโครงสร้างต่างๆ ในระหว่างการทดสอบหน่วย (unit test) 
    เพื่อให้การทดสอบมีความถูกต้องและไม่เกิดผลกระทบจากตัวแปรหรือโค้ดที่อยู่นอก scope ของการทดสอบนั้นๆ

        การควบคุม scope ในการเขียน unit tests ช่วยให้การทดสอบมีความชัดเจน, ป้องกันการทดสอบที่พึ่งพาข้อมูลภายนอก 
    และสามารถแยกผลลัพธ์ของการทดสอบแต่ละกรณีได้อย่างชัดเจน ซึ่งทำให้โค้ดของเรามีความเป็นระเบียบและง่ายต่อการบำรุงรักษา

    วิธีควบคุม Scope ใน Unit Test 

    1. การใช้ตัวแปรในฟังก์ชันทดสอบ (Local Scope)
        ใน unit test ทุกๆ ตัวแปรที่ใช้ในฟังก์ชันทดสอบควรประกาศใน local scope ของฟังก์ชันนั้นๆ 

    2. การใช้ t.Run() เพื่อควบคุม Scope ของการทดสอบ
        คุณสามารถใช้ t.Run() เพื่อจัดการกับ subtests ซึ่งจะช่วยให้สามารถควบคุมการทดสอบได้ดีขึ้น 
    โดยแยก test cases ออกเป็นกลุ่มย่อยๆ ใน scope ของตัวเอง ภายใต้ฟังก์ชันหลัก ซึ่งทำให้แต่ละกรณีทดสอบไม่ทำให้มีผลกระทบต่อกัน

    3. การ Mocking และ Stubbing (Mocking Scope)
        บางครั้งคุณอาจต้องการควบคุมการเข้าถึงของตัวแปรหรือฟังก์ชันภายนอกที่ไม่สามารถเข้าถึงได้จากภายใน unit test ได้โดยตรง 
    เช่น ฐานข้อมูล หรือ API ภายนอก โดยการใช้ mocking หรือ stubbing เพื่อจำลองพฤติกรรมของฟังก์ชันเหล่านั้น และจำกัดการเข้าถึงเฉพาะภายในฟังก์ชันทดสอบนั้นๆ

    4. การใช้ Test Fixtures
        Test Fixtures คือการตั้งค่าหรือการเตรียมข้อมูลที่ใช้ในการทดสอบ ตัวแปรที่ใช้ใน Fixtures จะถูกจำกัดให้มี scope ภายในแต่ละกรณีทดสอบ
    ซึ่งช่วยให้สามารถเตรียมข้อมูลที่ต้องการใช้ในแต่ละการทดสอบได้อย่างชัดเจน

    5. การควบคุม Scope ของตัวแปรด้วยการใช้ defer


สรุป
    Control scope in unit tests in Go หมายถึงการจำกัดขอบเขตการเข้าถึงตัวแปรหรือฟังก์ชันภายในการทดสอบเพื่อให้แน่ใจว่าแต่ละการทดสอบแยกจากกันและไม่ขึ้นอยู่กับสถานะหรือข้อมูลจากภายนอก ซึ่งสามารถทำได้โดย:

    - การใช้ local variables ในแต่ละฟังก์ชันทดสอบ
    - การใช้ subtests ด้วย t.Run()
    - การใช้ mocking หรือ stubbing เพื่อจำลองพฤติกรรมของฟังก์ชันภายนอก
    - การใช้ test fixtures เพื่อจัดเตรียมข้อมูลทดสอบ
    - การใช้ defer เพื่อทำความสะอาดหลังการทดสอบ