Remote Procedure Call (RPC)
        คือ การเรียกใช้ฟังก์ชันจากระยะไกล เป็นแนวคิดที่ทำให้เราสามารถเรียกใช้งานฟังก์ชันบน เครื่องอื่น ได้ เสมือนกับว่ามันเป็นฟังก์ชันในเครื่องเรานั่นเอง
    ใช้ผ่านแพ็กเกจ net/rpc และยังสามารถใช้ RPC ที่ทันสมัยและทรงพลังมากขึ้นอย่าง gRPC ได้อีกด้วย

    1. RPC ใน Go ด้วย net/rpc (จาก Standard Library)
        ภาษา Go มีแพ็กเกจ net/rpc ที่ให้เราสามารถสร้าง RPC server และ client ได้ง่าย ๆ โดยไม่ต้องติดตั้งอะไรเพิ่มเติม

        หลักการทำงาน:
            - สร้าง struct (โครงสร้างข้อมูล) ที่มี method (ฟังก์ชัน)
            - Method ต้องมีรูปแบบดังนี้ 
                func (t *Type) MethodName(args *ArgsType, reply *ReplyType) error
            
            - registry struct กับ RPC server    
            - Client สามารถเรียกใช้ method เหล่านี้ได้ผ่านเครือข่าย

        ข้อจำกัดของ net/rpc : 
           - ใช้ gob ในการเข้ารหัสข้อมูล ซึ่งใช้ได้เฉพาะกับภาษา Go
           - ไม่รองรับระบบยืนยันตัวตน, streaming, หรือทำงานข้ามภาษา
           - ไม่มีระบบ middleware หรือ TLS โดยอัตโนมัติ


    2. gRPC ใน Go (RPC ทันสมัยจาก Google)
        gRPC เป็น RPC framework ใช้ร่วมกับ Protocol Buffers (protobuf)
        
        ข้อดีของ gRPC:
            - รองรับการสื่อสารระหว่างหลายภาษา (cross-language)
            - รองรับ streaming
            - มีระบบ TLS และการควบคุม timeout, deadline
            - เหมาะสำหรับระบบ production 


สรุป
    - ถ้าต้องการใช้งานง่ายและภายในโปรเจกต์ Go อย่างเดียว — ใช้ net/rpc ได้เลย
    - ถ้าต้องการระบบที่ทันสมัย รองรับหลายภาษา และ production-grade — แนะนำให้ใช้ gRPC