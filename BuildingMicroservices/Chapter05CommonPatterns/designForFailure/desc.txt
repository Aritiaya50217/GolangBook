Design for failure
    คือแนวคิดหรือหลักการออกแบบระบบโดยตั้งใจให้ระบบสามารถรับมือกับความล้มเหลว (failure) ที่อาจเกิดขึ้นได้อย่างมีประสิทธิภาพ ไม่ให้เกิดการล่มทั้งระบบ และลดผลกระทบให้น้อยที่สุด

    หลักการสำคัญ

        1. ยอมรับว่า failure เกิดขึ้นได้เสมอ
            - ระบบทุกระบบมีโอกาสล้มเหลว ไม่ว่าจะเป็น hardware, network, service ภายนอก หรือ software bugs
            - เราไม่ควรออกแบบระบบให้สมบูรณ์แบบจนไม่ยืดหยุ่นต่อ failure

        2. แยกส่วน (Isolation) เพื่อป้องกันผลกระทบแบบโดมิโน
            - ถ้าส่วนใดส่วนหนึ่งล้มเหลว ไม่ให้ล้มทั้งระบบ เช่น การแยก service เป็น microservices หรือใช้ circuit breakers

        3. มีระบบ Retry และ Backoff
            - เมื่อเกิด failure ให้ลองส่งคำขอซ้ำโดยเพิ่มระยะเวลาระหว่าง retry เพื่อไม่ให้ overload ระบบ

        4. ใช้ Queue และ Asynchronous Processing

            - ลดการพึ่งพาการตอบสนองแบบ synchronous ที่อาจบล็อกระบบ
            - ให้ worker ประมวลผลงานที่ล่าช้าแยกต่างหาก

        5. ตรวจจับและแจ้งเตือนเมื่อเกิด failure
            - มี monitoring และ alerting เพื่อให้ทีมรับรู้และแก้ไขปัญหาเร็วขึ้น

        6. มีแผนสำรอง (Fallback)
            - เช่น การให้บริการข้อมูลสำรอง หรือ degraded mode เมื่อระบบหลักล้มเหลว


    ตัวอย่างการ Design for failure ใน Golang Event Processing
        
        - ใช้ queue สำหรับงานที่อาจล้มเหลวแทนการรอแบบ synchronous
       
        - worker ที่ดึงงานจาก queue มีระบบ retry เมื่อส่งข้อมูลล้มเหลว
       
        - ใช้ circuit breaker หรือ timeout เพื่อตัดการเรียก service ที่ล้มเหลวบ่อยๆ
       
        - monitor health ของ worker และ queue เพื่อแจ้งเตือนเมื่อเกิดปัญหา    