The testing pyramid
    เป็นแนวคิดที่ช่วยออกแบบ กลยุทธ์การทดสอบซอฟต์แวร์ ให้มีโครงสร้างที่สมดุล โดยแบ่งประเภทของการทดสอบออกเป็น 3 ชั้นหลัก ๆ เพื่อควบคุม ความเร็ว, ต้นทุน, และ ความน่าเชื่อถือ ของระบบ

            UI Tests (E2E)
           ───────────────
          Integration Tests
        ─────────────────────
        Unit Tests (ฐานกว้างสุด)

    รายละเอียดแต่ละชั้น
        1. Unit Tests (ฐานล่างสุด)
            - ทดสอบ: ฟังก์ชันเล็ก ๆ หรือโมดูลแบบแยกส่วน
            - ทำงานเร็ว, เขียนง่าย, ต้นทุนต่ำ
            - ตัวอย่าง: ทดสอบฟังก์ชันคำนวณภาษี

        2. Integration Tests
            - ทดสอบ: การทำงานร่วมกันของหลายๆ ส่วน เช่น DB, API, Service ต่าง ๆ
            - ตรวจสอบว่าโมดูลต่าง ๆ สื่อสารกันถูกต้อง
            - ช้ากว่า unit test, ซับซ้อนกว่า

        3. End-to-End (E2E) / UI Tests (ยอดพีระมิด) 
            - ทดสอบ: พฤติกรรมของระบบทั้งระบบแบบผู้ใช้จริง
            - ตัวอย่าง: ทดสอบการ login ผ่าน browser
            - ช้า, เปราะบาง, ใช้ resource มาก → ควรมีให้น้อยและเฉพาะจุดสำคัญ   

    หลักการสำคัญ
        | ประเภท        | จำนวนที่แนะนำ   | ความเร็ว   | ความซับซ้อน     | เป้าหมายหลัก          
        | ------------- | ------------- | --------  | -----------   | ----------------------   
        | Unit Test     | มากที่สุด        | เร็ว       | น้อย           | ความถูกต้องของ logic     
        | Integration   | ปานกลาง       | ปานกลาง   | ปานกลาง       | ส่วนประกอบทำงานร่วมกัน 
        | E2E / UI Test | น้อยที่สุด        | ช้า        | สูง            | ประสบการณ์ผู้ใช้      

