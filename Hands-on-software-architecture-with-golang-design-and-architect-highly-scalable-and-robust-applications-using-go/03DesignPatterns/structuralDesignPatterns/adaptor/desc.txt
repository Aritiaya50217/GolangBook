Adapter Pattern
        เป็นรูปแบบโครงสร้าง (Structural Design Pattern) ที่ช่วยให้สามารถทำงานร่วมกันได้ระหว่างอ็อบเจ็กต์ที่มีอินเทอร์เฟซไม่เข้ากัน 
    โดยไม่ต้องแก้ไขโค้ดเดิมของอ็อบเจ็กต์เหล่านั้น 

    โครงสร้างของ Adapter Pattern 
        1. Target: อินเทอร์เฟซที่ระบบลูกค้าคาดหวัง
        2. Adaptee: คลาสที่มีอินเทอร์เฟซเดิมที่ไม่ตรงกับที่ระบบลูกค้าต้องการ
        3. Adapter: คลาสที่ทำหน้าที่แปลงอินเทอร์เฟซของ Adaptee ให้ตรงกับ Target
        4. Client: ระบบลูกค้าที่ใช้งานผ่าน Target

    หลักการของ Adapter Pattern
            Adapter Pattern ทำหน้าที่เป็นสะพานเชื่อมระหว่างสองอินเทอร์เฟซที่ไม่เข้ากัน โดยการสร้าง "Adapter" ที่ทำหน้าที่แปลงคำขอจากอินเทอร์เฟซหนึ่งไปยังอีกอินเทอร์เฟซหนึ่ง 
        ทำให้สามารถใช้งานอ็อบเจ็กต์ที่มีอินเทอร์เฟซไม่ตรงกันได้อย่างราบรื่น

    ข้อดีของ Adapter Pattern
        1. ความยืดหยุ่น: สามารถรวมระบบที่มีอินเทอร์เฟซต่างกันเข้าด้วยกันได้โดยไม่ต้องแก้ไขโค้ดเดิม
        2. การบำรุงรักษาง่าย: การเปลี่ยนแปลงในระบบภายนอกสามารถจัดการได้ผ่าน Adapter โดยไม่กระทบต่อโค้ดหลักของระบบ
        3. การทดสอบง่าย: สามารถทดสอบแต่ละ Adapter แยกจากกันได้ ทำให้การทดสอบมีความยืดหยุ่นมากขึ้น

    ข้อควรระวัง
        1. ความซับซ้อน: การใช้ Adapter มากเกินไปอาจทำให้โค้ดมีความซับซ้อนและยากต่อการเข้าใจ
        2. ประสิทธิภาพ: การแปลงอินเทอร์เฟซอาจเพิ่มความหน่วงในการทำงานของระบบ    