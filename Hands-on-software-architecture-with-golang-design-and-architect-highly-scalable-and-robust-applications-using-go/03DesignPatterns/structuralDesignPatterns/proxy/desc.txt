Proxy Design Pattern
        รูปแบบการออกแบบในกลุ่ม Structural Patterns ที่มีจุดประสงค์ในการสร้าง "ตัวแทน" (Proxy) 
    สำหรับการเข้าถึงวัตถุอื่น โดยสามารถ ควบคุม, ปรับเปลี่ยน, หรือเพิ่มฟังก์ชัน ก่อนหรือหลังการเรียกใช้งานวัตถุนั้น

    แนวคิดของ Proxy Pattern : "สร้างอ็อบเจ็กต์ตัวแทนที่ควบคุมการเข้าถึงไปยังอ็อบเจ็กต์จริง"

    ประเภทของ Proxy ที่พบบ่อย
        1. Virtual Proxy    สร้างหรือโหลด object หนัก ๆ เมื่อจำเป็นเท่านั้น (lazy loading) 
        2. Protection Proxy	ควบคุมการเข้าถึง เช่น ตรวจสอบสิทธิ์ก่อนเข้าถึงข้อมูล
        3. Remote Proxy	ใช้แทน object ที่อยู่บนเครื่องอื่น เช่น network call
        4. Logging/Cache Proxy	แทรกพฤติกรรมเพิ่มเติม เช่น บันทึก log หรือ caching

สรุป
    1. Proxy คือตัวแทนควบคุมการเข้าถึง object จริง  
    2. ใช้เมื่อต้องควบคุม, เพิ่มเงื่อนไข หรือเพิ่มประสิทธิภาพ
    3. ใช้ interface และ struct เพื่อสร้าง proxy
    4. เพิ่มความยืดหยุ่น, ปลอดภัย, บริหารทรัพยากร