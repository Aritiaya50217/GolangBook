Singleton
        เป็นแนวทางที่ใช้เพื่อให้แน่ใจว่าในโปรแกรมจะมีอินสแตนซ์ของอ็อบเจ็กต์เพียงตัวเดียว และสามารถเข้าถึงได้จากทุกที่ในแอปพลิเคชัน 
    โดยไม่จำเป็นต้องสร้างใหม่ทุกครั้งที่ต้องการใช้งาน

    หลักการของ Singleton Pattern 
        1. มีอินสแตนซ์เดียว: รับประกันว่าในโปรแกรมจะมีอ็อบเจ็กต์ของคลาสนั้นเพียงตัวเดียว
        2. เข้าถึงได้จากทุกที่: สามารถเข้าถึงอินสแตนซ์นั้นได้จากทุกส่วนของโปรแกรม
        3. สร้างเมื่อจำเป็น: อินสแตนซ์จะถูกสร้างขึ้นเมื่อมีการเรียกใช้งานครั้งแรก (Lazy Initialization)

    ข้อดีของการใช้ Singleton ใน Go
        1. Thread-Safe: การใช้ sync.Once ช่วยให้การสร้างอินสแตนซ์ปลอดภัยจากปัญหาที่อาจเกิดขึ้นจากการเข้าถึงพร้อมกันของหลาย goroutine
        2. ประหยัดทรัพยากร: ช่วยลดการสร้างอ็อบเจ็กต์ซ้ำซ้อน ทำให้ประหยัดหน่วยความจำและทรัพยากรอื่น ๆ
        3. การเข้าถึงที่ง่าย: สามารถเข้าถึงอินสแตนซ์เดียวกันจากทุกส่วนของโปรแกรมได้อย่างสะดวก    

    ข้อควรระวัง
        1. การทดสอบ: การใช้ Singleton อาจทำให้การทดสอบหน่วย (Unit Testing) เป็นเรื่องยาก เนื่องจากสถานะของอินสแตนซ์อาจมีผลต่อการทดสอบ
        2. การพึ่งพา: การพึ่งพา Singleton อาจทำให้โค้ดมีความยืดหยุ่นน้อยลง และทำให้การเปลี่ยนแปลงในอนาคตเป็นเรื่องยาก
        3. การจัดการสถานะ: ต้องระมัดระวังในการจัดการสถานะภายในของ Singleton เพื่อหลีกเลี่ยงปัญหาที่อาจเกิดขึ้นจากการเข้าถึงพร้อมกัน    