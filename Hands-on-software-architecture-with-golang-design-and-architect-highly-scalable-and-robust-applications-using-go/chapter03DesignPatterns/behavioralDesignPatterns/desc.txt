Behavioral Design Patterns
    กลุ่มของรูปแบบการออกแบบซอฟต์แวร์ (Design Patterns) ที่มุ่งเน้นไปที่ การสื่อสารระหว่างอ็อบเจ็กต์ และ การควบคุมพฤติกรรมการทำงานร่วมกันของอ็อบเจ็กต์ต่าง ๆ

    เป้าหมายหลักของ Behavioral Patterns
        1. แยกความรับผิดชอบในการควบคุม flow ของโปรแกรม
        2. ทำให้ object สื่อสารกันได้โดยลดการ coupling
        3. ช่วยให้ระบบมีความยืดหยุ่นและขยายตัวได้ง่ายขึ้น

    Behavioral Patterns ที่สำคัญ 
        1. Chain of Responsibility	ส่งคำร้องขอผ่านลำดับของ handler
        2. Command	แทนคำสั่งเป็น object เพื่อเรียกใช้งาน/เลิกทำ/จัดคิว
        3. Interpreter	ประมวลผลไวยากรณ์ของภาษาเฉพาะ (DSL)
        4. Iterator	เข้าถึงสมาชิกของ collection โดยไม่เปิดเผยโครงสร้างภายใน
        5. Mediator	ควบคุมการสื่อสารระหว่าง object โดยใช้ตัวกลาง
        6. Memento	เก็บ snapshot ของ object เพื่อใช้ย้อนกลับ
        7. Observer	แจ้งเตือนหลาย object เมื่อ state เปลี่ยน
        8. State	เปลี่ยนพฤติกรรม object ตามสถานะ
        9. Strategy	สลับพฤติกรรม (algorithm) ได้แบบ runtime
        10. Template Method	โครงสร้างการทำงานหลักถูกกำหนดไว้ โดยให้ subclass กำหนดบางขั้นตอนเอง
        11. Visitor	แยก logic ออกจาก object ที่ถูกดำเนินการ

สรุป
    สิ่งที่ได้จาก Behavioral Patterns
        1. ทำให้โค้ดมีความยืดหยุ่น
        2. แยก logic ออกเป็นโมดูลได้ง่าย
        3. ลด coupling ระหว่าง object
        4. รองรับการขยายระบบในอนาคต

