Abstract Factory
        รูปแบบการออกแบบ (Design Pattern) ประเภทหนึ่งในกลุ่ม Creational Patterns ที่ช่วยให้เราสามารถสร้างกลุ่มของอ็อบเจ็กต์ที่เกี่ยวข้องกันได้ 
    โดยไม่ต้องระบุชนิดของอ็อบเจ็กต์เหล่านั้นโดยตรง

    หลักการทำงานของ Abstract Factory:
        1. กำหนดอินเทอร์เฟซที่เป็นนามธรรม (Abstract Interface) สำหรับการสร้างอ็อบเจ็กต์ที่เกี่ยวข้องกัน เช่น ปุ่ม (Button) และหน้าต่าง (Window)
        2. สร้างคลาสที่เป็นนามธรรม (Abstract Factory) ซึ่งมีเมธอดสำหรับสร้างอ็อบเจ็กต์เหล่านั้น
        3. สร้างคลาสที่เป็นคอนกรีต (Concrete Factory) ที่สืบทอดจาก Abstract Factory และสร้างอ็อบเจ็กต์ที่เป็นคอนกรีต (Concrete Product) ตามที่ต้องการ
        4. ในโค้ดของผู้ใช้ (Client Code) จะทำงานกับ Abstract Factory และ Abstract Product เท่านั้น โดยไม่ต้องรู้รายละเอียดของ Concrete Factory และ Concrete Product

    ประโยชน์ของ Abstract Factory:
        1. ความยืดหยุ่น: สามารถเพิ่มหรือเปลี่ยนแปลงกลุ่มผลิตภัณฑ์ได้โดยไม่กระทบต่อโค้ดของผู้ใช้
        2. การแยกความรับผิดชอบ: แยกการสร้างอ็อบเจ็กต์ออกจากการใช้งาน ทำให้โค้ดมีความชัดเจนและง่ายต่อการบำรุงรักษา
        3. ความเข้ากันได้: รับประกันว่าอ็อบเจ็กต์ที่สร้างขึ้นจะสามารถทำงานร่วมกันได้อย่างถูกต้อง
