Proxy Pattern 
        ใช้สำหรับการสร้างตัวแทนหรือพร็อกซี (Proxy) เพื่อควบคุมการเข้าถึงวัตถุจริง (Real Object) ซึ่งพร็อกซีจะทำหน้าที่แทรกซ้อนระหว่างไคลเอนต์ (Client) กับวัตถุจริง (Real Object) 
    เพื่อดำเนินการเพิ่มเติม เช่น การตรวจสอบสิทธิ์, การแคชข้อมูล, การบันทึกการใช้งาน, หรือการหน่วงเวลาการสร้างวัตถุจนกว่าจะจำเป็นต้องใช้

    ประเภทของ Proxy Pattern : 
        - Virtual Proxy: ใช้เมื่อคุณต้องการสร้างอ็อบเจ็กต์ (เช่น การโหลดข้อมูลจากดิสก์) และคุณต้องการหน่วงเวลาการสร้างอ็อบเจ็กต์จนกว่าจะต้องใช้งาน
       
        - Protection Proxy: ใช้เพื่อควบคุมการเข้าถึงอ็อบเจ็กต์จริง โดยมักจะใช้เพื่อจัดการการตรวจสอบสิทธิ์ก่อนที่จะให้เข้าถึงฟังก์ชันบางอย่าง
       
        - Remote Proxy: ใช้เมื่อคุณต้องการเชื่อมต่อกับอ็อบเจ็กต์ที่อยู่ในเครื่องหรือเซิร์ฟเวอร์อื่นๆ ซึ่งจะช่วยซ่อนความซับซ้อนในการทำงาน
       
        - Cache Proxy: ใช้ในการเก็บข้อมูลที่เคยได้รับเพื่อไม่ให้ต้องทำการคำนวณหรือดึงข้อมูลจากแหล่งที่มาใหม่ในอนาคต

สรุป:
        Proxy Pattern ใน Go ใช้สำหรับการควบคุมการเข้าถึงอ็อบเจ็กต์จริง โดยการสร้างตัวแทน (Proxy) ที่สามารถทำงานเพิ่มเติม 
    เช่น การหน่วงเวลาในการสร้างอ็อบเจ็กต์จริง หรือการเพิ่มฟังก์ชันเสริม เช่น การตรวจสอบสิทธิ์, การแคชข้อมูล หรือการบันทึกการใช้งาน