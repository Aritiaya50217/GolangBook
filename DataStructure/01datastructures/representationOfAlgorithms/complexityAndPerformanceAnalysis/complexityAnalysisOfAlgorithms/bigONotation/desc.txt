Big O notation
        เครื่องมือที่ใช้ในการวิเคราะห์ ความซับซ้อนทางเวลา (Time Complexity) และ ความซับซ้อนทางพื้นที่ (Space Complexity) ของอัลกอริธึม 
    โดยจะช่วยบอกว่าอัลกอริธึมจะใช้เวลาและหน่วยความจำมากแค่ไหนเมื่อขนาดของข้อมูลเพิ่มขึ้น หรือพูดง่ายๆ คือการวัดประสิทธิภาพของอัลกอริธึมในแง่ของการเติบโตของ input size (ขนาดของข้อมูลที่ป้อนเข้า)

    การใช้ Big O Notation ในการวิเคราะห์อัลกอริธึม
        1. O(1) - Constant Time 
            อัลกอริธึมที่มี O(1) หมายถึง เวลาที่ใช้จะไม่ขึ้นอยู่กับขนาดของข้อมูล (input size) และจะใช้เวลาเท่ากันไม่ว่าจะมีข้อมูลมากน้อยแค่ไหน
        
        2. O(n) - Linear Time
            อัลกอริธึมที่มี O(n) หมายถึง เวลาที่ใช้จะเพิ่มขึ้นตามขนาดของข้อมูล เช่น ถ้ามีข้อมูลเพิ่มขึ้นเป็นสองเท่า เวลาที่ใช้ก็จะเพิ่มขึ้นเป็นสองเท่า
       
        3. O(n^2) - Quadratic Time
            อัลกอริธึมที่มี O(n^2) หมายถึง เวลาที่ใช้จะเพิ่มขึ้นเป็นกำลังสองของขนาดข้อมูล เช่น ถ้ามีข้อมูลเพิ่มขึ้นเป็นสองเท่า เวลาที่ใช้จะเพิ่มขึ้นเป็นสี่เท่า

        4. O(log n) - Logarithmic Time
            อัลกอริธึมที่มี O(log n) หมายถึง เวลาที่ใช้จะเพิ่มขึ้นช้ากว่าการเพิ่มขนาดของข้อมูล เช่น Tree Search หรือการใช้ Binary Search


    สรุปการใช้ Big O ใน Go:
        - O(1): เวลาคงที่ (Constant Time)
        - O(n): เวลาสัมพันธ์กับขนาดข้อมูล (Linear Time)
        - O(n^2): เวลาสัมพันธ์กับขนาดข้อมูลยกกำลังสอง (Quadratic Time)
        - O(log n): เวลาสัมพันธ์กับลอการิธึมของขนาดข้อมูล (Logarithmic Time)            