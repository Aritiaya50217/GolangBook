The GOMAXPROCS Lever
    ควบคุมการทำงานของ Go Scheduler เพื่อจัดการกับ Goroutines ให้มีประสิทธิภาพที่สุดสำหรับฮาร์ดแวร์ที่ใช้งานอยู่

- การตั้งค่า GOMAXPROCS
    1. Env ในตัวอย่างนี้ โค้ดจะใช้ CPU 2 คอร์สำหรับการรัน Goroutines
        GOMAXPROCS=2 go run main.go

    2. Runtime
        ใช้ runtime.GOMAXPROCS() เพื่อกำหนดค่าหรืออ่านค่าปัจจุบัน

- ผลกระทบของ GOMAXPROCS
    1. การใช้ CPU และ Goroutines
        - ค่า GOMAXPROCS ที่สูงขึ้นทำให้ Go Scheduler สามารถกระจายการทำงานของ Goroutines ไปยังหลาย Core ได้มากขึ้น
        - หากตั้งค่าไว้สูงเกินไปเมื่อเทียบกับจำนวน Core จริง อาจทำให้เกิดการ Overhead จากการสลับ Context (Context Switching)
   
    2. ประสิทธิภาพ
        - Workloads ที่ใช้ CPU หนัก (CPU-Bound): ควรตั้ง GOMAXPROCS ใกล้เคียงกับจำนวน Core จริง เพื่อเพิ่มประสิทธิภาพ
       -  Workloads ที่ใช้ I/O หนัก (I/O-Bound): อาจไม่จำเป็นต้องเพิ่มค่า GOMAXPROCS มาก เพราะส่วนใหญ่รอการทำงาน I/O

- แนวทางการตั้งค่า GOMAXPROCS
    1. ค่าเริ่มต้นมักดีที่สุด
    2. ปรับตามความต้องการ
        - หากต้องการลดการใช้ CPU ให้ลด GOMAXPROCS
        - หากต้องการประสิทธิภาพสูงสุดในงาน CPU-Bound ให้ตั้งค่าเท่าจำนวน Core จริง
    3.วิเคราะห์ผลลัพธ์: ทดสอบและวัดผล (Benchmark) เพื่อหาค่าที่เหมาะสมที่สุด
    
- ข้อดีของ GOMAXPROCS Lever
    - ช่วยให้ควบคุมการใช้ทรัพยากรได้
    - ลด Overhead ในงาน Concurrent
    - ปรับปรุงประสิทธิภาพในงานที่ต้องการจัดการ Goroutines จำนวนมาก


** สรุป GOMAXPROCS เป็นตัวช่วยสำคัญที่ช่วยปรับปรุงการใช้ CPU ในงาน Concurrent ของ Go และควรตั้งค่าให้เหมาะสมกับลักษณะงานเพื่อผลลัพธ์ที่ดีที่สุด    