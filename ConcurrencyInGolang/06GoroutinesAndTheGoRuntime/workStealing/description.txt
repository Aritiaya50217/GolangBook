Work Stealing with Concurrency
        กระบวนการที่ระบบ runtime ของ Go ใช้เทคนิค work stealing เพื่อช่วยให้ goroutine ที่ทำงานพร้อมกัน (concurrent) 
    ได้รับการจัดการอย่างมีประสิทธิภาพ โดยการจัดการงานนี้จะกระจายไปยังหลายๆ goroutine และใช้ประโยชน์จากหลายๆ CPU core ที่มีอยู่ 
    เพื่อให้โปรแกรมทำงานเร็วขึ้นและใช้ทรัพยากรที่มีอย่างเต็มที่

    การทำงาน
        1. Processor (P) และ Goroutine (G)
            - Go runtime ใช้ P (Processor) เป็นตัวจัดการการทำงานในแต่ละ core ของ CPU.
            - Goroutines จะถูกผูกไว้กับ P ที่ทำงานในแต่ละ core. P จะมี local run queue (งานที่มันจะทำ) ที่จะเก็บ goroutine ที่รอการทำงาน

        2. การทำงานของ Work Stealing
            - เมื่อ goroutine ใน P ทำงานเสร็จ และ local run queue ของมันว่างหรือมีงานน้อยเกินไป, P ตัวนั้นจะทำการ "ขโมย" งานจาก P อื่นๆ ที่มีงานเหลือหรือมีงานมากกว่า
            - การขโมยงานนี้จะเกิดขึ้นระหว่าง P ต่างๆ (P ที่ไม่มีงานมากจะไปขโมยงานจาก P ที่มีงานเหลือ)

        3. การใช้หลายๆ Core
            - การใช้ Work Stealing ช่วยให้ทุกๆ core ทำงานอย่างมีประสิทธิภาพมากขึ้น. ทุกๆ core จะไม่ idle (ว่างเปล่า) เพราะมันสามารถขโมยงานจาก core อื่นๆ ที่ยังคงมีงานเหลือ
            - ระบบนี้ช่วยลดการเกิด bottleneck หรือการมีคอขวด (bottleneck) ในระบบที่ทำงานพร้อมกัน
                  