Queuing
        การจัดการข้อมูลในลักษณะคิว โดยมีหลักการ FIFO (First-In-First-Out) ซึ่งข้อมูลที่ถูกเพิ่มเข้ามาก่อนจะถูกดึงออกไปก่อน นิยมใช้ในงานที่เกี่ยวข้องกับการจัดการข้อมูลที่เข้ามาต่อเนื่อง 
    เช่น งานที่ต้องทำงานแบบ Asynchronous, การประมวลผลแบบ Batch, หรือการจัดการ Task

    พื้นฐานของ Queuing
        1. คิว (Queue) คือโครงสร้างข้อมูลที่รองรับการเพิ่มและดึงข้อมูลแบบ FIFO
       
        2. การทำงานมักมีสองกระบวนการหลัก:
            - Enqueue: เพิ่มข้อมูลเข้าไปในคิว
            - Dequeue: ดึงข้อมูลออกจากคิว

        3. ใน Go คิวสามารถสร้างได้หลายวิธี เช่น:
            - ใช้ slices หรือ linked lists
            - ใช้ channels (เหมาะกับงาน Concurrent)

    ข้อดีของการใช้คิวใน Go
        1. การจัดการงานแบบ Async: คิวช่วยให้จัดการกับงานที่ต้องประมวลผลแบบ Asynchronous ได้ง่าย
        2. Concurrency: ใช้ Channels ใน Go เพื่อรองรับการประมวลผลหลายงานพร้อมกันอย่างมีประสิทธิภาพ
        3. ควบคุมลำดับงาน: คิวช่วยให้ลำดับงานมีความชัดเจน (FIFO)   

    การใช้งาน
        1. Message Queues: เช่น RabbitMQ, Kafka
        2. Job Queues: สำหรับกระจายงานให้ Worker หลายตัว
        3. Data Streams: การประมวลผลข้อมูลที่มาจากแหล่งข้อมูลต่อเนื่อง เช่น Logs หรือ Metrics       