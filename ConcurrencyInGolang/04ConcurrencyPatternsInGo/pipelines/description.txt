Pipelines 
    เป็นรูปแบบการเขียนโปรแกรมที่ใช้ Channels และ Goroutines เพื่อส่งข้อมูลจากขั้นตอนหนึ่งไปยังอีกขั้นตอนหนึ่งอย่างต่อเนื่อง (streaming data processing) โดย Pipeline ช่วยให้การทำงานแบ่งออกเป็นหลายขั้นตอนที่สามารถทำงานได้พร้อมกัน (concurrent processing) และแต่ละขั้นตอนจะรับข้อมูลจาก Channel ของขั้นตอนก่อนหน้าและส่งข้อมูลไปยัง Channel ของขั้นตอนถัดไป

    องค์ประกอบของ Pipelines
        1. Stages (ขั้นตอน)
            - แต่ละขั้นตอนจะเป็นฟังก์ชันที่รับข้อมูลจาก Channel หนึ่งและส่งผลลัพธ์ไปยัง Channel อื่น 
            - ขั้นตอนแต่ละขั้นสามารถประมวลผลข้อมูลได้แบบ Concurrent ผ่าน Goroutines

        2. Channels
            - ใช้ Channels เป็นตัวกลางในการสื่อสารระหว่างขั้นตอน 

        3. Goroutines
            -  แต่ละขั้นตอนทำงานใน Goroutines แยกกัน เพื่อให้สามารถประมวลผลพร้อมกันได้


    ข้อดีของ Pipelines
        1. Concurrency
            - สามารถประมวลผลข้อมูลในแต่ละขั้นตอนได้พร้อมกัน

        2. Decoupling
            - แต่ละขั้นตอนแยกจากกัน ทำให้โค้ดอ่านง่ายและแก้ไขง่าย

        3.Scalability
            - สามารถเพิ่ม Goroutines เพื่อเพิ่มความเร็วในการประมวลผล

    แนวทางปฏิบัติที่ดี (Best Practices)
        1. ใช้ Context สำหรับควบคุมการทำงาน
            - ใช้ context.Context เพื่อจัดการ Timeout หรือ Cancel การทำงานใน Pipeline

        2. ปิด Channels เมื่อการประมวลผลเสร็จสิ้น
            - การปิด Channel ช่วยป้องกัน Deadlocks และบอก Goroutines อื่นว่าข้อมูลหมดแล้ว

        3. ใช้ Buffer Channels ถ้าข้อมูลจำนวนมาก
            - Buffer Channels ลดการ Block ระหว่างการส่งข้อมูล

        4. จัดการ Error ในแต่ละขั้นตอน
            - ส่ง Error ผ่าน Channel แยกสำหรับการจัดการข้อผิดพลาด        