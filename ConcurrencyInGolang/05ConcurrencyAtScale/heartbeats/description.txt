Heart Beats

        กลไกที่ใช้ในการตรวจสอบความพร้อมใช้งานหรือความต่อเนื่องของการเชื่อมต่อระหว่างระบบต่างๆ หรือระหว่าง Client และ Server โดยปกติจะมีการส่งข้อความ (หรือสัญญาณ) เป็นระยะๆ เพื่อแสดงว่ายังมีการเชื่อมต่อและระบบยังทำงานปกติอยู่
    ใน Go (Golang) การใช้ Heartbeats มักเกี่ยวข้องกับโปรแกรมแบบเครือข่ายหรือระบบที่ต้องการตรวจสอบสถานะการทำงานแบบเรียลไทม์ เช่น WebSocket, gRPC, หรือการตรวจสอบสถานะของ Microservices

    แนวทางที่ดีในการออกแบบระบบ Heartbeats
        1. กำหนด Interval อย่างเหมาะสม: Heartbeats ไม่ควรเร็วเกินไปจนเปลืองทรัพยากร หรือช้าเกินไปจนไม่ตอบสนองต่อปัญหา
        2. ตรวจสอบ Timeout: ใช้ time.After หรือ context.WithTimeout เพื่อจัดการกรณีการเชื่อมต่อขาดหาย
        3. เพิ่ม Context หรือ Metadata: รวมข้อมูลเพิ่มเติม เช่น Timestamp เพื่อ Debug หรือวิเคราะห์สถานะ
        4. รองรับ Error Handling: ตรวจสอบกรณีการส่ง Heartbeat ล้มเหลว เช่น การเชื่อมต่อขาด
        5. ใช้ Protocol ที่เหมาะสม: เช่น WebSocket หรือ gRPC สำหรับระบบที่ต้องการการเชื่อมต่อแบบ Real-time
        