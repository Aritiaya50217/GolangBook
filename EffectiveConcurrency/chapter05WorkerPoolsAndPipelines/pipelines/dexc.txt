Pipelines
    รูปแบบการประมวลผลข้อมูลเป็นลำดับขั้นตอน (stages) โดยแต่ละขั้นตอนสามารถทำงานแยกกันได้อย่างอิสระ และสื่อสารกันผ่านช่องทาง (channels)

    ภาพรวมลำดับการทำงาน 
        Stage 1: รับข้อมูลเข้า
        Stage 2: ประมวลผลข้อมูล
        Stage 3: ส่งออกข้อมูล

    ข้อดีของ Pipeline
        1. ทำงานแบบ concurrent และ parallel ได้ง่าย
        2. ใช้ resource ได้มีประสิทธิภาพ
        3. โครงสร้างชัดเจน แยกการประมวลผลเป็นขั้นตอน

    ข้อควรระวัง
        1. ต้องปิด channel ให้ถูกต้อง
        2. ต้องจัดการ error และการหยุดระบบ (cancellation) ให้ดี
        3. หลีกเลี่ยง deadlock    

fan-out 
        การส่งข้อมูลจาก แหล่งข้อมูลเดียว (channel หนึ่ง) ไปยัง หลาย goroutines เพื่อให้ทำงาน พร้อมกัน (concurrently) เช่น การประมวลผลงานหลายชิ้นพร้อมกันเพื่อเพิ่มความเร็ว
    ใช้เพื่อกระจายโหลด ไปยังหลาย worker,เพิ่มความเร็ว ของการประมวลผล,รองรับการ scale ที่ดีในระบบ concurrent

    Fan-out ใช้เพื่อ 
        1. กระจายโหลด ไปยังหลาย worker
        2. เพิ่มความเร็ว ของการประมวลผล
        3. รองรับการ scale ที่ดีในระบบ concurrent

Fan-in 
    คือการนำ ข้อมูลจากหลาย goroutines หรือหลาย channel มารวมกันใน channel เดียว เพื่อประมวลผลต่อไป เช่น การรวมผลลัพธ์จากหลาย worker ที่ทำงานพร้อมกัน        

    ใช้เพื่ออะไร
        1. รวมผลลัพธ์จากหลาย worker/producer
        2. ลดความซับซ้อนในการอ่านข้อมูล
        3. รองรับการประมวลผลขนานที่มีหลายแหล่งข้อมูล


สรุป Fan-out vs Fan-in   

    Fan-out	กระจายงานจาก channel เดียว ไปยังหลาย worker (goroutine)
    Fan-in	รวมข้อมูลจากหลาย worker/channel เข้ามา channel เดียว        