Compare and Swap (CAS)
        คือเทคนิคหนึ่งในโปรแกรมแบบ concurrent ที่ใช้เพื่อ อัปเดตค่าของตัวแปรแบบ atomic (อะตอมมิก) โดยไม่ต้องใช้ lock (เช่น mutex) ซึ่งช่วยให้โปรแกรมทำงานเร็วขึ้นในบางกรณี
    Go มีฟังก์ชัน CAS ให้ใช้ในแพ็กเกจ sync/atomic

    หลักการทำงานของ CAS  ทุกขั้นตอนนี้เกิดขึ้น แบบ atomic (ไม่มีการแทรกจาก thread/goroutine อื่น)
        1. ตรวจสอบค่าปัจจุบันของตัวแปรว่า ตรงกับค่าที่เราคาดหวังไว้ หรือไม่
        2. ถ้าตรงจะเปลี่ยนค่าตัวแปรเป็นค่าที่ใหม่ (atomic)
        3. ถ้าไม่ตรงจะไม่ทำอะไร

    ข้อดี
        1. เร็วกว่า mutex ถ้าใช้ถูกกรณี     
        2. เหมาะกับ lock-free data structure (เช่น queue, stack)

    ข้อควรระวัง
        1. ใช้ยากกว่า mutex เพราะ logic จะซับซ้อนขึ้น
        2. ต้อง loop ซ้ำ ๆ ถ้า CAS ไม่สำเร็จอาจเกิด “spin” และกิน CPU  



atomic.Pointer[T]    
    ตัวแปร pointer ที่สามารถโหลด(อ่าน)และจัดเก็บ(เขียน) แบบthread-safe โดยไม่ใช้ mutex

    ทำไมต้องใช้ 
        1. ในระบบที่มีหลาย goroutine เข้าถึง pointer เดียวกัน ถ้าใช้ pointer ธรรมดา อาจเกิด race condition
        2. แก้ปัญหานี้ด้วยการให้ การเข้าถึง pointer เป็น atomic operation

    เมธอดหลักที่ใช้
        1. Load()	อ่านค่าปัจจุบันของ pointer แบบ atomic
        2. Store(ptr)	เขียน pointer ใหม่แบบ atomic
        3. CompareAndSwap(old, new)	เปรียบเทียบ pointer ปัจจุบันกับ old และอัปเดตเป็น new ถ้าเท่ากัน
        4. Swap(new)	สลับ pointer ใหม่ และคืนค่าเก่า